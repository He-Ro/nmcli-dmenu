#!/usr/bin/env python
# encoding:utf8
"""NetworkManager command line dmenu script.

To add new connections or enable/disable networking requires policykit
permissions setup per:
https://wiki.archlinux.org/index.php/NetworkManager#Set_up_PolicyKit_permissions

OR running the script as root

Add dmenu formatting options and default terminal if desired to
~/.config/networkmanager-dmenu/config.ini

"""
import itertools
import locale
import os
import shlex
import sys
from os.path import expanduser
from subprocess import Popen, PIPE

import gi
gi.require_version('NM', '1.0')
from gi.repository import NM

try:
    import configparser as configparser
except ImportError:
    import ConfigParser as configparser

ENV = os.environ.copy()
ENV['LC_ALL'] = 'C'
ENC = locale.getpreferredencoding()

client = NM.Client.new(None)


def dmenu_cmd(num_lines, prompt="Networks"):
    """Parse config.ini if it exists and add options to the dmenu command

    Args: args - num_lines: number of lines to display
                 prompt: prompt to show
    Returns: command invocation (as a list of strings) for
                dmenu -l <num_lines> -p <prompt> -i ...

    """
    dmenu_command = "dmenu"
    conf = configparser.ConfigParser()
    conf.read(expanduser("~/.config/networkmanager-dmenu/config.ini"))
    try:
        args = conf.items('dmenu')
    except configparser.NoSectionError:
        conf = False
    if not conf:
        res = [dmenu_command, "-i", "-l", str(num_lines), "-p", str(prompt)]
    else:
        args_dict = dict(args)
        dmenu_args = []
        if "dmenu_command" in args_dict:
            command = shlex.split(args_dict["dmenu_command"])
            dmenu_command = command[0]
            dmenu_args = command[1:]
            del args_dict["dmenu_command"]
        if "p" in args_dict and prompt == "Networks":
            prompt = args_dict["p"]
            del args_dict["p"]
        elif "p" in args_dict:
            del args_dict["p"]
        if "rofi" in dmenu_command:
            lines = "-i -dmenu -lines"
        else:
            lines = "-i -l"
        if "pinentry" in args_dict:
            del args_dict["pinentry"]
        extras = (["-" + str(k), str(v)] for (k, v) in args_dict.items())
        res = [dmenu_command, str(num_lines), "-p", str(prompt)]
        res.extend(dmenu_args)
        res += list(itertools.chain.from_iterable(extras))
        res[1:1] = lines.split()
    return res


def choose_adapter(client):
    """If there is more than one wifi adapter installed, ask which one to use

    """
    devices = client.get_devices()
    devices = list(filter(lambda d: d.get_device_type() == NM.DeviceType.WIFI,
                          devices))
    if len(devices) == 0:
        return None
    elif len(devices) == 1:
        return devices[0]
    device_names = "\n".join([d.get_iface() for d in devices]).encode(ENC)
    sel = Popen(dmenu_cmd(len(devices), "CHOOSE ADAPTER:"),
                stdin=PIPE,
                stdout=PIPE,
                env=ENV).communicate(input=device_names)[0].decode(ENC)
    if not sel.strip():
        sys.exit()
    devices = filter(lambda d: d.get_iface() == sel.strip(), devices)
    assert len(devices) == 1
    return devices[0]


def create_other_actions(client):
    """Return list of other actions that can be taken

    """
    networking_enabled = client.networking_get_enabled()
    networking_action = "Disable" if networking_enabled else "Enable"
    wifi_enabled = client.wireless_get_enabled()
    wifi_action = "Disable" if wifi_enabled else "Enable"
    return [Action("{} Wifi".format(wifi_action), toggle_wifi,
                   not wifi_enabled),
            Action("{} Networking".format(networking_action),
                   toggle_networking, not networking_enabled),
            Action("Launch Connection Manager", launch_connection_editor,
                   None)]


def ssid_to_utf8(ap):
    ssid = ap.get_ssid()
    if not ssid:
        return ""
    return NM.utils_ssid_to_utf8(ssid.get_data())


def ap_security(ap):
    flags = ap.get_flags()
    wpa_flags = ap.get_wpa_flags()
    rsn_flags = ap.get_rsn_flags()
    str = ""
    if ((flags & getattr(NM, '80211ApFlags').PRIVACY) and
            (wpa_flags == 0) and (rsn_flags == 0)):
        str = str + " WEP"
    if wpa_flags != 0:
        str = str + " WPA1"
    if rsn_flags != 0:
        str = str + " WPA2"
    if ((wpa_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X) or
            (rsn_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X)):
        str = str + " 802.1X"

    # If there is no security use "--"
    if str == "":
        str = "--"
    return str.lstrip()


class Action(object):
    def __init__(self,
                 name,
                 f,
                 args,
                 ):
        self.name = name
        self.f = f
        if args is None:
            self.args = None
        elif isinstance(args, list):
            self.args = args
        else:
            self.args = [args]

    def __str__(self):
        return self.name

    def __call__(self):
        if self.args is None:
            self.f()
        else:
            self.f(*self.args)


def process_ap(ap, existing):
    if existing:
        toggle_existing(ssid_to_utf8(ap))
    else:
        if ap_security(ap) != "--":
            password = get_passphrase()
        else:
            password = ""
        set_new_connection(ssid_to_utf8(ap), password)


def process_vpn(vpn, activate):
    print("Processing VPN: %s" % vpn.get_id())
    if activate:
        client.activate_connection_async(vpn)
    else:
        client.deactivate_connection_async(vpn)


def process_gsm(gsm):
    print("Processing GSM: %s" % gsm.get_id())
    toggle_existing(gsm.get_id())


def create_ap_actions(aps, active_ap, existing_connections):
    names = [ssid_to_utf8(ap) for ap in aps]
    max_len_name = max([len(name) for name in names])
    secs = [ap_security(ap) for ap in aps]
    max_len_sec = max([len(sec) for sec in secs])
    bars = [NM.utils_wifi_strength_bars(ap.get_strength()) for ap in aps]
    active_ap_bssid = active_ap.get_bssid() if active_ap is not None else ""
    active_flags = ["**" if ap.get_bssid() == active_ap_bssid else
                    "  " for ap in aps]
    is_existing = [len(ap.filter_connections(existing_connections)) > 0
                   for ap in aps]
    return [Action("{} {:<{}s}  {:<{}s}  {}".format(active_flag, name,
            max_len_name, sec, max_len_sec, bar), process_ap, [ap, exists])
            for ap, active_flag, name, sec, bar, exists in zip(aps,
            active_flags, names, secs, bars, is_existing)]


def create_vpn_actions(vpns, active):
    active_vpn_ids = [a.get_id() for a in active if a.get_vpn()]
    actions = []
    for vpn in vpns:
        is_active = vpn.get_id() in active_vpn_ids
        active_flag = "**" if is_active else "  "
        action_name = "{} {}:VPN".format(active_flag, vpn.get_id())
        if is_active:
            active_connection = [a for a in active
                                 if a.get_id() == vpn.get_id()]
            assert len(active_connection) == 1
            active_connection = active_connection[0]
            actions.append(Action(action_name, process_vpn,
                                  [active_connection, False]))
        else:
            actions.append(Action(action_name, process_vpn, [vpn, True]))
    return actions


# TODO: Test this
def create_gsm_actions(gsms, active):
    active_gsm_ids = [a.get_id() for a in active if
                      a.get_connection().is_type(NM.SETTING_GSM_SETTING_NAME)]
    active_flags = ["**" if (gsm.get_id() in active_gsm_ids) else
                    "  " for gsm in gsms]
    return [Action("{} {}:GSM".format(active_flag, gsm.get_id()),
                   process_gsm, gsm) for active_flag, gsm in
            zip(active_flags, gsms)]


def get_selection(client, aps, vpns, gsms, others):
    """Combine the arg lists and send to dmenu for selection.
    Also executes the associated action.

    Args: args - aps: list of Actions
                 vpns: list of Actions
                 gsms: list of Actions
                 others: list of Actions
    """
    formated_aps = [str(ap) for ap in aps]
    formated_vpns = [str(vpn) for vpn in vpns]
    formated_gsms = [str(gsm) for gsm in gsms]
    formated_others = [str(other) for other in others]

    inp = []
    if formated_aps:
        inp += formated_aps + [""]
    if vpns:
        inp += formated_vpns + [""]
    if gsms:
        inp += formated_gsms + [""]
    inp += formated_others

    inp_bytes = "\n".join([str(i) for i in inp]).encode(ENC)
    sel = Popen(dmenu_cmd(len(inp)), stdin=PIPE, stdout=PIPE,
                env=ENV).communicate(input=inp_bytes)[0].decode(ENC)

    if not sel.rstrip():
        sys.exit()

    action = list(filter(lambda x: str(x) == sel.rstrip(),
                         aps + vpns + gsms + others))
    assert len(action) == 1, "Selection was ambiguous: %s" % str(sel)
    return action[0]


def toggle_existing(conn):
    """Get conn status, then toggle connection up or down if it's not
    'activated'

    Args: conn - string

    """
    conn_status = ["nmcli", "-t", "-f", "GENERAL.STATE",
                   "connection", "show", conn]
    res = Popen(conn_status, stdout=PIPE, env=ENV).communicate()[0]
    if 'activated' not in res.decode(ENC):
        updown = 'up'
    else:
        updown = 'down'
    conn_string = ["nmcli", "connection", updown, "id", conn]
    Popen(conn_string, stdout=PIPE, env=ENV).communicate()


def toggle_networking(enable):
    """Enable/disable networking

    Args: enable - boolean

    """
    client.networking_set_enabled(enable)


def toggle_wifi(enable):
    """Enable/disable Wifi

    Args: enable - boolean

    """
    client.wireless_set_enabled(enable)


def launch_connection_editor():
    """Launch nmtui or the gui nm-connection-editor

    """
    conf = configparser.ConfigParser()
    terminal = "xterm"
    gui_if_available = "True"
    conf.read(expanduser("~/.config/networkmanager-dmenu/config.ini"))
    try:
        editor = conf.items("editor")
    except configparser.NoSectionError:
        conf = False
    if conf:
        opts = {str(k): str(v) for (k, v) in editor}
        if "terminal" in opts:
            terminal = opts["terminal"]
        if "gui_if_available" in opts:
            gui_if_available = opts["gui_if_available"]
    if gui_if_available == "True":
        try:
            Popen(["nm-connection-editor"]).communicate()
        except OSError:
            Popen([terminal, "-e", "nmtui"]).communicate()
    else:
        Popen([terminal, "-e", "nmtui"]).communicate()


def get_passphrase():
    """Get a password

    Returns: string

    """

    conf = configparser.ConfigParser()
    conf.read(expanduser("~/.config/networkmanager-dmenu/config.ini"))
    pinentry = None
    try:
        pinentry = conf.get("dmenu", "pinentry")
    except (configparser.NoOptionError, configparser.NoSectionError):
        pass
    if pinentry:
        pin = ""
        s = Popen(pinentry, stdout=PIPE, stdin=PIPE)
        out = s.communicate(input=b'setdesc Get network password\ngetpin\n')[0]
        if out:
            res = out.decode(ENC).split("\n")[2]
            if res.startswith("D "):
                pin = res.split("D ")[1]
        return pin
    else:
        return Popen(dmenu_cmd(0, "Passphrase"),
                     stdin=PIPE, stdout=PIPE).communicate()[0].decode(ENC)


def set_new_connection(ssid, pw):
    """Setup a new NetworkManager connection

    Args: ssid - string
          pw - string

    """
    pw = str(pw).strip()
    new_conn = ["nmcli", "device", "wifi", "connect", ssid, "password", pw]
    res = Popen(new_conn, stdout=PIPE, env=ENV).communicate()
    # Delete connection if it fails somehow.
    # With nmcli 0.9.10, you occasionally get an error message:
    # "Error: Failed to add/activate new connection: Unknown error", which
    # doesn't always mean the connection failed, so test for 'activated' or
    # 'activating' in the connection status as well
    # Delete connections with errors
    if "activated" not in res[0].decode(ENC):
        delete = ["nmcli", "connection", "delete", ssid]
        Popen(delete, stdout=PIPE).communicate()


def run():
    adapter = choose_adapter(client)
    conns = client.get_connections()

    if adapter:
        aps = sorted(adapter.get_access_points(),
                     key=lambda a: a.get_strength(), reverse=True)
        active_ap = adapter.get_active_access_point()
        ap_actions = create_ap_actions(aps, active_ap, conns)
    else:
        ap_actions = []

    active = client.get_active_connections()

    vpns = list(filter(lambda c: c.is_type(NM.SETTING_VPN_SETTING_NAME),
                       conns))
    gsms = list(filter(lambda c: c.is_type(NM.SETTING_GSM_SETTING_NAME),
                       conns))

    vpn_actions = create_vpn_actions(vpns, active)
    gsm_actions = create_gsm_actions(gsms, active)
    other_actions = create_other_actions(client)

    sel = get_selection(client, ap_actions, vpn_actions,
                        gsm_actions, other_actions)
    sel()


if __name__ == '__main__':
    run()

# vim: set et ts=4 sw=4 :
